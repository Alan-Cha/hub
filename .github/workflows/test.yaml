name: Test experiment charts

on:
  pull_request:

jobs:
  # Get the paths for the Helm charts to lint
  get_versions:
    runs-on: ubuntu-latest

    steps:
      - name: Get the paths for Helm charts to lint
        id: set-matrix
        run: |
          # Serialize versions into JSON array
          jsonVersions=$(jq -ncR '[inputs]' <<< "$versions")
          echo $jsonVersions

          # Output serialized jsonVersions
          echo "matrix=$jsonVersions" | sed -e "s/,\"\"//" >> $GITHUB_OUTPUT

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  http-experiment:
    name: HTTP load test
    needs: get_versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.get_versions.outputs.matrix) }}

    steps:    
    - name: Check out code
      uses: actions/checkout@v3

    - name: Get modified files in the charts/iter8 folder
      id: modified-files
      uses: tj-actions/changed-files@v35
      with:
        files: charts/iter8

    - uses: iter8-tools/iter8@v0.13
      if: steps.modified-files.outputs.any_modified == 'true'

    - name: Start kind cluster ${{ matrix.version }}
      uses: helm/kind-action@v1.5.0
      if: steps.modified-files.outputs.any_modified == 'true'
      with:
        wait: 300s
        node_image: ${{ matrix.version }}

    - name: Create app
      if: steps.modified-files.outputs.any_modified == 'true'
      run: |
        kubectl create deployment httpbin --image=kennethreitz/httpbin
        kubectl expose deployment httpbin --type=ClusterIP --port=80
        kubectl wait --for=condition=available --timeout=60s deploy/httpbin

    - name: iter8 k launch
      if: steps.modified-files.outputs.any_modified == 'true'
      run: |
        iter8 k launch \
        --localChart \
        --chartName charts/iter8 \
        --set tasks={http} \
        --set http.url="http://httpbin.default/get" \
        --set runner=job

    - name: Try other iter8 k commands
      if: steps.modified-files.outputs.any_modified == 'true'
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s
        iter8 k report
        iter8 k log
        iter8 k delete
      
  grpc-experiment:
    name: gRPC load test
    needs: get_versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.get_versions.outputs.matrix) }}

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Get modified files in the charts/iter8 folder
      id: modified-files
      uses: tj-actions/changed-files@v35
      with:
        files: charts/iter8
    
    - uses: iter8-tools/iter8@v0.13
      if: steps.modified-files.outputs.any_modified == 'true'

    - name: Start kind cluster ${{ matrix.version }}
      uses: helm/kind-action@v1.5.0
      if: steps.modified-files.outputs.any_modified == 'true'
      with:
        wait: 300s
        node_image: ${{ matrix.version }}

    - name: Create app
      if: steps.modified-files.outputs.any_modified == 'true'
      run: |
        kubectl create deploy hello --image=docker.io/grpc/java-example-hostname:latest --port=50051
        kubectl expose deploy hello --port=50051
        kubectl wait --for=condition=available --timeout=60s deploy/hello
        
    - name: iter8 k launch
      if: steps.modified-files.outputs.any_modified == 'true'
      run: |
        iter8 k launch \
        --localChart \
        --chartName charts/iter8 \
        --set tasks={grpc} \
        --set grpc.host="hello.default:50051" \
        --set grpc.call="helloworld.Greeter.SayHello" \
        --set grpc.protoURL="https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto" \
        --set runner=job

    - name: Try other iter8 k commands
      if: steps.modified-files.outputs.any_modified == 'true'
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s
        iter8 k report
        iter8 k log
        iter8 k delete

  autox:
    name: AutoX test
    needs: get_versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.get_versions.outputs.matrix) }}
        
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Get modified files in the charts/autox folder
      id: modified-files
      uses: tj-actions/changed-files@v35
      with:
        files: charts/autox

    - uses: iter8-tools/iter8@v0.13
      if: steps.modified-files.outputs.any_modified == 'true'

    - name: Start kind cluster ${{ matrix.version }}
      uses: helm/kind-action@v1.5.0
      if: steps.modified-files.outputs.any_modified == 'true'
      with:
        wait: 300s
        node_image: ${{ matrix.version }}

    - name: Create namespace
      if: steps.modified-files.outputs.any_modified == 'true'
      run: |
        kubectl create namespace argocd
        
    - name: Start AutoX controller
      if: steps.modified-files.outputs.any_modified == 'true'
      run: |
        helm install autox charts/autox \
        --set 'groups.httpbin.trigger.name=httpbin' \
        --set 'groups.httpbin.trigger.namespace=default' \
        --set 'groups.httpbin.trigger.group=apps' \
        --set 'groups.httpbin.trigger.version=v1' \
        --set 'groups.httpbin.trigger.resource=deployments' \
        --set 'groups.httpbin.specs.iter8.name=iter8' \
        --set 'groups.httpbin.specs.iter8.values.tasks={ready,http,assess}' \
        --set 'groups.httpbin.specs.iter8.values.ready.deploy=httpbin' \
        --set 'groups.httpbin.specs.iter8.values.ready.service=httpbin' \
        --set 'groups.httpbin.specs.iter8.values.ready.timeout=60s' \
        --set 'groups.httpbin.specs.iter8.values.http.url=http://httpbin.default/get' \
        --set 'groups.httpbin.specs.iter8.values.assess.SLOs.upper.http/error-count=0' \
        --set 'groups.httpbin.specs.iter8.values.assess.SLOs.upper.http/latency-mean=50' \
        --set 'groups.httpbin.specs.iter8.version=0.13.0' \
        --set 'groups.httpbin.specs.iter8.values.runner=job'

    - name: Check AutoX controller
      if: steps.modified-files.outputs.any_modified == 'true'
      run: kubectl wait --for=condition=available --timeout=60s deploy/autox -n argocd
